"""
Unified Configuration for Trading Application
Handles paths and settings across different environments
Generated by Config_Codespace.py
"""
import os
from pathlib import Path

# Environment Detection
IS_COLAB = 'google.colab' in sys.modules
IS_CODESPACE = os.environ.get('CODESPACES', 'false').lower() == 'true'
IS_DOCKER = os.path.exists('/.dockerenv')

# Base Paths
if IS_COLAB:
    BASE_PATH = Path('./')
elif IS_CODESPACE:
    # In Codespaces, we're in /workspaces/[repo-name]
    BASE_PATH = Path.cwd()
else:
    BASE_PATH = Path('.')

# Directory Paths
DB_PATH = str(BASE_PATH / 'trading_system.db')
LOG_DIR = str(BASE_PATH / 'logs')
BACKUP_DIR = str(BASE_PATH / 'backups')
UPDATE_DIR = str(BASE_PATH / 'updates')
DOC_DIR = str(BASE_PATH / 'Documentation')

# Service Configuration
SERVICES = {
    'coordination': {
        'name': 'Coordination Service',
        'port': 5000,
        'file': 'coordination_service.py',
        'critical': True
    },
    'scanner': {
        'name': 'Security Scanner',
        'port': 5001,
        'file': 'security_scanner.py',
        'critical': True
    },
    'pattern': {
        'name': 'Pattern Analysis',
        'port': 5002,
        'file': 'pattern_analysis.py',
        'critical': True
    },
    'technical': {
        'name': 'Technical Analysis',
        'port': 5003,
        'file': 'technical_analysis.py',
        'critical': True
    },
    'trading': {
        'name': 'Paper Trading',
        'port': 5005,
        'file': 'paper_trading.py',
        'critical': True
    },
    'pattern_rec': {
        'name': 'Pattern Recognition',
        'port': 5006,
        'file': 'pattern_recognition_service.py',
        'critical': False
    },
    'news': {
        'name': 'News Service',
        'port': 5008,
        'file': 'news_service.py',
        'critical': False
    },
    'reporting': {
        'name': 'Reporting Service',
        'port': 5009,
        'file': 'reporting_service.py',
        'critical': False
    },
    'dashboard': {
        'name': 'Web Dashboard',
        'port': 5010,
        'file': 'web_dashboard_service.py',
        'critical': False
    }
}

# Trading Configuration
TRADING_CONFIG = {
    'market_hours': {
        'start': '09:30',
        'end': '16:00',
        'timezone': 'America/New_York',
        'trading_days': ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday']
    },
    'risk_management': {
        'max_position_size': 0.1,      # 10% of portfolio per position
        'max_portfolio_risk': 0.02,     # 2% total portfolio risk
        'stop_loss_percent': 0.02,      # 2% stop loss
        'take_profit_percent': 0.06,    # 6% take profit
        'daily_loss_limit': 0.05,       # 5% daily loss limit
        'max_positions': 10             # Maximum concurrent positions
    },
    'scanning': {
        'min_price': 10.0,
        'max_price': 500.0,
        'min_volume': 1000000,
        'scan_interval_minutes': 30
    }
}

# Database Configuration
DATABASE_CONFIG = {
    'path': DB_PATH,
    'pragma': {
        'journal_mode': 'WAL',
        'synchronous': 'NORMAL',
        'cache_size': -64000,  # 64MB
        'foreign_keys': 'ON',
        'temp_store': 'MEMORY'
    },
    'pool_size': 5,
    'timeout': 30.0
}

# Logging Configuration
LOGGING_CONFIG = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'standard': {
            'format': '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
        },
        'detailed': {
            'format': '%(asctime)s - %(name)s - %(levelname)s - %(filename)s:%(lineno)d - %(message)s'
        }
    },
    'handlers': {
        'file': {
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': f'{LOG_DIR}/trading_system.log',
            'maxBytes': 10485760,  # 10MB
            'backupCount': 5,
            'formatter': 'detailed'
        },
        'console': {
            'class': 'logging.StreamHandler',
            'level': 'INFO',
            'formatter': 'standard'
        }
    },
    'root': {
        'level': 'INFO',
        'handlers': ['file', 'console']
    }
}

# Create necessary directories
for directory in [LOG_DIR, BACKUP_DIR, UPDATE_DIR, DOC_DIR]:
    Path(directory).mkdir(exist_ok=True)

def get_service_url(service_key):
    """Get the URL for a service"""
    if service_key in SERVICES:
        return f"http://localhost:{SERVICES[service_key]['port']}"
    return None

def get_db_connection():
    """Get a database connection with proper configuration"""
    import sqlite3
    
    conn = sqlite3.connect(DATABASE_CONFIG['path'], timeout=DATABASE_CONFIG['timeout'])
    conn.row_factory = sqlite3.Row
    
    # Apply PRAGMA settings
    for pragma, value in DATABASE_CONFIG['pragma'].items():
        conn.execute(f"PRAGMA {pragma} = {value}")
    
    return conn

# Environment info
print(f"Trading Config Loaded: BASE_PATH = {BASE_PATH}")
if IS_CODESPACE:
    print("Running in GitHub Codespaces")
elif IS_COLAB:
    print("Running in Google Colab")
else:
    print("Running in Local Environment")
