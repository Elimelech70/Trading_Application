#!/usr/bin/env python3
"""
GitHub Codespaces Setup for Trading Application
Version: 1.0.0
Last Updated: 2025-06-23

This script sets up a fresh GitHub Codespaces environment for the Trading Application.
Assumes all Python files are already configured correctly for Codespaces.
"""

import os
import sys
import subprocess
from pathlib import Path
from datetime import datetime

class TradingSystemSetup:
    def __init__(self):
        self.root_path = Path('.')
        self.timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        self.setup_log = []
        
    def log(self, message):
        """Log setup progress"""
        timestamp = datetime.now().strftime('%H:%M:%S')
        log_entry = f"[{timestamp}] {message}"
        print(log_entry)
        self.setup_log.append(log_entry)
    
    def step1_create_directory_structure(self):
        """Create all necessary directories"""
        self.log("\nüìÅ Step 1: Creating directory structure...")
        
        directories = [
            'logs',
            'backups',
            'Documentation',
            'Documentation/implementation_plans',
            'Documentation/change_diaries',
            'Documentation/specifications',
            'Documentation/archive',
            'updates',
            '.update_state'
        ]
        
        for directory in directories:
            Path(directory).mkdir(parents=True, exist_ok=True)
            self.log(f"  ‚úì Created {directory}/")
    
    def step2_create_requirements_file(self):
        """Create comprehensive requirements.txt"""
        self.log("\nüì¶ Step 2: Creating requirements.txt...")
        
        requirements_content = """# Trading Application Requirements
# Generated by setup_codespace_trading.py
# Last Updated: """ + self.timestamp + """

# Core Web Framework
flask==3.0.0
flask-cors==4.0.0
flask-socketio==5.3.5
waitress==2.1.2

# HTTP and Networking
requests==2.31.0
urllib3==2.0.7

# Data Processing
pandas==2.1.4
numpy==1.26.2

# Machine Learning
scikit-learn==1.3.2

# Trading and Market Data
yfinance==0.2.33
alpaca-py==0.21.1

# Technical Analysis (Optional - comment out if TA-Lib install fails)
# TA-Lib==0.4.28

# Natural Language Processing
textblob==0.17.1
nltk==3.8.1

# Web Scraping
beautifulsoup4==4.12.2
lxml==4.9.3

# System Monitoring
psutil==5.9.6

# Date/Time Handling
python-dateutil==2.8.2
pytz==2023.3

# Environment Configuration
python-dotenv==1.0.0
"""
        
        with open('requirements.txt', 'w') as f:
            f.write(requirements_content)
        
        self.log("  ‚úì Created requirements.txt")
    
    def step3_initialize_database(self):
        """Initialize a fresh database"""
        self.log("\nüóÑÔ∏è  Step 3: Initializing database...")
        
        if Path('database_migration.py').exists():
            try:
                # Remove existing database if present
                if Path('./trading_system.db').exists():
                    os.remove('./trading_system.db')
                    self.log("  ‚úì Removed existing database")
                
                # Run database migration
                result = subprocess.run(
                    [sys.executable, 'database_migration.py'],
                    capture_output=True,
                    text=True,
                    timeout=30
                )
                
                if result.returncode == 0:
                    self.log("  ‚úì Database initialized successfully")
                    
                    if Path('./trading_system.db').exists():
                        size = Path('./trading_system.db').stat().st_size
                        self.log(f"  ‚úì Database created: trading_system.db ({size:,} bytes)")
                else:
                    self.log(f"  ‚ö†Ô∏è  Database initialization warning: {result.stderr}")
                    
            except Exception as e:
                self.log(f"  ‚ö†Ô∏è  Database initialization error: {e}")
        else:
            self.log("  ‚ö†Ô∏è  database_migration.py not found")
    
    def step4_create_utility_scripts(self):
        """Create all utility scripts"""
        self.log("\nüìù Step 4: Creating utility scripts...")
        
        # 1. Startup script
        startup_script = """#!/bin/bash
# Trading Application Startup Script

echo "üöÄ Starting Trading Application..."
echo "================================"

# Check if database exists
if [ ! -f "./trading_system.db" ]; then
    echo "Initializing database..."
    python database_migration.py
fi

# Start all services
python hybrid_manager.py start

echo "================================"
echo "‚úÖ Trading Application Started!"
echo "üìä Dashboard: http://localhost:5010"
echo "================================"
"""
        
        with open('start_trading.sh', 'w') as f:
            f.write(startup_script)
        os.chmod('start_trading.sh', 0o755)
        self.log("  ‚úì Created start_trading.sh")

        # 2. Health check script
        health_check = '''#!/usr/bin/env python3
"""
Health Check Script for Trading Application
"""
import requests
import sys
from datetime import datetime

SERVICES = {
    'Coordination Service': 5000,
    'Security Scanner': 5001,
    'Pattern Analysis': 5002,
    'Technical Analysis': 5003,
    'Paper Trading': 5005,
    'Pattern Recognition': 5006,
    'News Service': 5008,
    'Reporting Service': 5009,
    'Web Dashboard': 5010,
    'Trading Scheduler': 5011
}

def check_service(name, port, timeout=2):
    """Check if a service is responding"""
    try:
        response = requests.get(f'http://localhost:{port}/health', timeout=timeout)
        return response.status_code == 200
    except:
        return False

def main():
    """Run health checks on all services"""
    print("\\nüè• Trading Application Health Check")
    print(f"üìÖ {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print("="*60)
    
    healthy_count = 0
    
    for name, port in SERVICES.items():
        is_healthy = check_service(name, port)
        status = "‚úÖ OK" if is_healthy else "‚ùå Not responding"
        print(f"{name:<25} (port {port:<5}) - {status}")
        
        if is_healthy:
            healthy_count += 1
    
    print("="*60)
    print(f"Summary: {healthy_count}/{len(SERVICES)} services healthy")
    
    return 0 if healthy_count == len(SERVICES) else 1

if __name__ == "__main__":
    sys.exit(main())
'''
        
        with open('health_check.py', 'w') as f:
            f.write(health_check)
        os.chmod('health_check.py', 0o755)
        self.log("  ‚úì Created health_check.py")

        # 3. Check trades script
        check_trades_script = '''#!/usr/bin/env python3
"""
Check recent trades and trading activity
"""
import sqlite3
import pandas as pd
from datetime import datetime

def check_recent_trades():
    try:
        conn = sqlite3.connect('./trading_system.db')
        
        # Recent trading cycles
        print("\\nüìä RECENT TRADING CYCLES")
        print("="*60)
        cycles_query = """
            SELECT cycle_id, status, start_time, 
                   securities_scanned, patterns_found, trades_executed
            FROM trading_cycles 
            ORDER BY start_time DESC
            LIMIT 10
        """
        cycles = pd.read_sql_query(cycles_query, conn)
        if not cycles.empty:
            print(cycles.to_string(index=False))
        else:
            print("No trading cycles found")
        
        # Recent orders
        print("\\nüíº RECENT ORDERS")
        print("="*60)
        orders_query = """
            SELECT symbol, side, quantity, price, status, created_timestamp
            FROM orders 
            ORDER BY created_timestamp DESC
            LIMIT 10
        """
        orders = pd.read_sql_query(orders_query, conn)
        if not orders.empty:
            print(orders.to_string(index=False))
        else:
            print("No orders found")
        
        conn.close()
        
    except Exception as e:
        print(f"Error: {e}")

if __name__ == "__main__":
    check_recent_trades()
'''
        
        with open('check_trades.py', 'w') as f:
            f.write(check_trades_script)
        os.chmod('check_trades.py', 0o755)
        self.log("  ‚úì Created check_trades.py")
    
    def step5_create_env_template(self):
        """Create .env template for API keys"""
        self.log("\nüîë Step 5: Creating .env template...")
        
        env_template = """# Trading Application Environment Variables
# Copy this file to .env and fill in your actual API keys

# Alpaca Paper Trading API (Required for real paper trading)
# Get these from https://alpaca.markets (use Paper Trading, not Live!)
ALPACA_PAPER_API_KEY=your_alpaca_api_key_here
ALPACA_PAPER_API_SECRET=your_alpaca_secret_key_here
ALPACA_PAPER_BASE_URL=https://paper-api.alpaca.markets

# News API (Optional - for sentiment analysis)
# Get from https://newsapi.org
NEWS_API_KEY=your_newsapi_key_here

# Trading Configuration
TRADING_MODE=paper  # paper or simulation
MAX_POSITIONS=10
RISK_PER_TRADE=0.02  # 2% risk per trade
DAILY_LOSS_LIMIT=0.05  # 5% daily loss limit
"""
        
        with open('.env.template', 'w') as f:
            f.write(env_template)
        self.log("  ‚úì Created .env.template")
        
        # Create/update .gitignore
        gitignore_content = """# Environment variables
.env
.env.local

# Database
trading_system.db
trading_system.db-journal
trading_system.db-wal

# Logs
logs/
*.log

# Python
__pycache__/
*.py[cod]
*$py.class
venv/
env/

# Backups
backups/
*.backup

# IDE
.vscode/
.idea/

# OS
.DS_Store
Thumbs.db
"""
        
        with open('.gitignore', 'w') as f:
            f.write(gitignore_content)
        self.log("  ‚úì Created .gitignore")
    
    def step6_install_dependencies(self):
        """Install Python dependencies"""
        self.log("\nüì¶ Step 6: Installing dependencies...")
        
        try:
            # Install requirements
            result = subprocess.run(
                [sys.executable, '-m', 'pip', 'install', '-r', 'requirements.txt'],
                capture_output=True,
                text=True
            )
            
            if result.returncode == 0:
                self.log("  ‚úì All dependencies installed successfully")
            else:
                self.log(f"  ‚ö†Ô∏è  Some dependencies may have failed to install")
                self.log("     Run manually: pip install -r requirements.txt")
                
        except Exception as e:
            self.log(f"  ‚ö†Ô∏è  Error installing dependencies: {e}")
    
    def main(self):
        """Run complete setup process"""
        print("\n" + "="*60)
        print("üöÄ Trading Application Setup for GitHub Codespaces")
        print("="*60)
        print(f"Timestamp: {self.timestamp}")
        print("="*60)
        
        # Check if in correct directory
        if not Path('hybrid_manager.py').exists():
            print("\n‚ö†Ô∏è  Warning: hybrid_manager.py not found!")
            print("Make sure you're in the Trading_Application repository root.")
            response = input("\nContinue anyway? (y/n): ")
            if response.lower() != 'y':
                print("‚ùå Setup cancelled")
                return
        
        try:
            # Run all setup steps
            self.step1_create_directory_structure()
            self.step2_create_requirements_file()
            self.step3_initialize_database()
            self.step4_create_utility_scripts()
            self.step5_create_env_template()
            self.step6_install_dependencies()
            
            print("\n" + "="*60)
            print("‚úÖ Setup Complete!")
            print("="*60)
            
            print("\nüìã Next Steps:")
            
            print("\n1. Configure API Keys (for real paper trading):")
            print("   cp .env.template .env")
            print("   nano .env  # Add your Alpaca API keys")
            
            print("\n2. Test the setup:")
            print("   python health_check.py")
            
            print("\n3. Start the Trading Application:")
            print("   ./start_trading.sh")
            print("   # OR")
            print("   python hybrid_manager.py start")
            
            print("\n4. Access the Web Dashboard:")
            print("   http://localhost:5010")
            print("   # In Codespaces, check the PORTS tab for the forwarded URL")
            
            print("\n5. Monitor trades:")
            print("   python check_trades.py")
            
            print("\nüìö Documentation: ./Documentation/")
            print("üìä Logs: ./logs/")
            print("üíæ Database: ./trading_system.db")
            
        except KeyboardInterrupt:
            print("\n\n‚ùå Setup interrupted by user")
        except Exception as e:
            print(f"\n‚ùå Setup failed with error: {e}")
            import traceback
            traceback.print_exc()

if __name__ == "__main__":
    setup = TradingSystemSetup()
    setup.main()
